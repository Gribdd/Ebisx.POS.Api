using Ebisx.POS.Api.Data;
using Ebisx.POS.Api.Entities;
using Ebisx.POS.Api.Services.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace Ebisx.POS.Api.Services;

public class UserService : IUserService
{
    private readonly ApplicationDbContext _dbContext;

    public UserService(ApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        return await _dbContext.Users
                .Include(u => u.UserRole)  // Include UserRole
                .ToListAsync();
    }

    public async Task<User?> GetUserByIdAsync(int privateId)
    {
        return await _dbContext.Users
                .Include(u => u.UserRole)  // Include UserRole
                .FirstOrDefaultAsync(u => u.PrivateId == privateId);
    }

    public async Task<User> CreateUserAsync(User user)
    {
        // Set the PublicId for client display
        user.PublicId = $"USR-{Guid.NewGuid().ToString().Substring(0, 8).ToUpper()}";

        // No need to manually set PrivateId, as it will be auto-generated by the database
        _dbContext.Users.Add(user);
        await _dbContext.SaveChangesAsync();
        return user;
    }

    public async Task<bool> UpdateUserAsync(int privateId, User updatedUser)
    {
        var existingUser = await _dbContext.Users.FindAsync(privateId);
        if (existingUser == null) return false;

        _dbContext.Entry(existingUser).CurrentValues.SetValues(updatedUser);
        await _dbContext.SaveChangesAsync();
        return true;
    }

    public async Task<bool> DeleteUserAsync(int privateId)
    {
        var user = await _dbContext.Users.FindAsync(privateId);
        if (user == null) return false;

        _dbContext.Users.Remove(user);
        await _dbContext.SaveChangesAsync();
        return true;
    }
}
